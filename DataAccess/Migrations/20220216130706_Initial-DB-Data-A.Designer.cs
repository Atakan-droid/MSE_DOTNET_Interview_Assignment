// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(EfMSE_DOTNET_Context))]
    [Migration("20220216130706_Initial-DB-Data-A")]
    partial class InitialDBDataA
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Concrete.ProductionLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProductionLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5086),
                            IsDeleted = false,
                            LineName = "A Üretim Yolu",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5093),
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5484),
                            IsDeleted = false,
                            LineName = "B Üretim Yolu",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5488),
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5490),
                            IsDeleted = false,
                            LineName = "C Üretim Yolu",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5491),
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5493),
                            IsDeleted = false,
                            LineName = "D Üretim Yolu",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 840, DateTimeKind.Local).AddTicks(5494),
                            isActive = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 830, DateTimeKind.Local).AddTicks(260),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 831, DateTimeKind.Local).AddTicks(988),
                            RoleName = "Admin",
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 831, DateTimeKind.Local).AddTicks(2516),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 831, DateTimeKind.Local).AddTicks(2523),
                            RoleName = "Bakım Personeli",
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 831, DateTimeKind.Local).AddTicks(2526),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 831, DateTimeKind.Local).AddTicks(2527),
                            RoleName = "Kullanıcı",
                            isActive = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Pressure")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("MaintenanceStaffId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 839, DateTimeKind.Local).AddTicks(3426),
                            IsDeleted = false,
                            LineId = 1,
                            MaintenanceStaffId = 2,
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 839, DateTimeKind.Local).AddTicks(3446),
                            Pressure = 108m,
                            StationName = "Birinci istasyon",
                            Status = "Çalışıyor",
                            Temperature = 50m,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 839, DateTimeKind.Local).AddTicks(5539),
                            IsDeleted = false,
                            LineId = 3,
                            MaintenanceStaffId = 3,
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 839, DateTimeKind.Local).AddTicks(5544),
                            Pressure = 8m,
                            StationName = "Ikinci istasyon",
                            Status = "Çalışıyor",
                            Temperature = 1m,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 839, DateTimeKind.Local).AddTicks(5549),
                            IsDeleted = false,
                            LineId = 2,
                            MaintenanceStaffId = 2,
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 839, DateTimeKind.Local).AddTicks(5550),
                            Pressure = 158m,
                            StationName = "Ücüncü istasyon",
                            Status = "Çalışıyor",
                            Temperature = 2000m,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 841, DateTimeKind.Local).AddTicks(6150),
                            IsDeleted = false,
                            Mail = "adminuser@gmail.com",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 841, DateTimeKind.Local).AddTicks(6158),
                            Name = "adminuser",
                            Password = "Ab123456789",
                            RoleID = 1,
                            Surname = "ADMINUSER",
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 841, DateTimeKind.Local).AddTicks(7802),
                            IsDeleted = false,
                            Mail = "atakangocer98@gmail.com",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 841, DateTimeKind.Local).AddTicks(7807),
                            Name = "Atakan",
                            Password = "123456",
                            RoleID = 2,
                            Surname = "Göçer",
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 2, 16, 16, 7, 5, 841, DateTimeKind.Local).AddTicks(7811),
                            IsDeleted = false,
                            Mail = "mock@gmail.com",
                            ModifiedDate = new DateTime(2022, 2, 16, 16, 7, 5, 841, DateTimeKind.Local).AddTicks(7812),
                            Name = "User",
                            Password = "123456",
                            RoleID = 3,
                            Surname = "UserSurname",
                            isActive = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Station", b =>
                {
                    b.HasOne("Entities.Concrete.ProductionLine", "ProductionLine")
                        .WithMany("Stations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "MaintenanceStaff")
                        .WithMany("Stations")
                        .HasForeignKey("MaintenanceStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceStaff");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.HasOne("Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Concrete.ProductionLine", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
